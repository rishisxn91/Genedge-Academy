// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("STUDENT") // STUDENT, MENTOR, ADMIN
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  enrollments Enrollment[]
  progress    Progress[]
  payments    Payment[]
  courses     Course[] // For MENTOR/ADMIN created courses

  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  pricePaise  Int      // Price in paise (â‚¹1 = 100 paise)
  imageUrl    String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  authorId String
  author   User       @relation(fields: [authorId], references: [id])
  modules  Module[]
  enrollments Enrollment[]

  @@map("courses")
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  courseId String
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lectures Lecture[]

  @@map("modules")
}

model Lecture {
  id           String   @id @default(cuid())
  title        String
  description  String?
  videoUrl     String
  durationSec  Int
  order        Int
  freePreview  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  moduleId String
  module   Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress Progress[]

  @@map("lectures")
}

model Enrollment {
  id        String   @id @default(cuid())
  enrolledAt DateTime @default(now())

  // Relations
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Progress {
  id          String   @id @default(cuid())
  lastSecond  Int      @default(0)
  completed   Boolean  @default(false)
  updatedAt   DateTime @updatedAt

  // Relations
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lectureId String
  lecture   Lecture   @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@unique([userId, lectureId])
  @@map("progress")
}

model Payment {
  id            String   @id @default(cuid())
  razorpayOrderId String @unique
  amount        Int      // Amount in paise
  currency      String   @default("INR")
  status        String   // pending, captured, failed
  notes         String?  // Store userId and courseId as JSON string
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}
